# Description: This file contains function bitwise_and(b1, b2), add_bitwise(b1, b2)


# A template for a helper function called rot that we recommend writing
# as part of your work on the encipher function.
def rot(c, n):
    """ your docstring goes here """
    # check to ensure that c is a single character
    assert(type(c) == str and len(c) == 1)

    # Put the rest of your code for this function below.
    rot_ord = ord(c) + n
    if 'a' <= c <= 'z':
        if rot_ord > ord('z'):
            return chr(rot_ord - 26)
        else:
            return chr(rot_ord)
    elif 'A' <= c <= 'Z':
        if rot_ord > ord('Z'):
            return chr(rot_ord - 26)
        else:
            return chr(rot_ord)
    else:
        return c


#### Put your code for the encipher function below. ####


# A helper function that could be useful when assessing
# the "Englishness" of a phrase.
# You do *NOT* need to modify this function.
def letter_probability(c):
    """ if c is the space character (' ') or an alphabetic character,
        returns c's monogram probability (for English);
        returns 1.0 for any other character.
        adapted from:
        http://www.cs.chalmers.se/Cs/Grundutb/Kurser/krypto/en_stat.html
    """
    # check to ensure that c is a single character
    assert(type(c) == str and len(c) == 1)
