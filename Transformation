# Author: Mengting Bao (mtbao@bu.edu),05/27/2022
# Description: This file contains function dec_to_bin(n), bin_to_dec(b)


# function 1
def dec_to_bin(n):
    """return a string version of the binary representation of the number
        input: n is a non-negative integer
    """
    # base cases that identify the conditions that n is 0 or 1
    if n == 0:
        return '0'
    if n == 1:
        return '1'
    else: # recursive case
        rest = dec_to_bin(n // 2)
        if n % 2 == 1:
            return rest + '1'
        if n % 2 == 0:
            return rest + '0'



# function 2
def bin_to_dec(b):
    """return the resulting integer by converting the number from binary to decimal
        input: b is a string
    """
    # base cases that identify the conditions that n is 0 or 1
    if b == '0':
        return 0
    if b == '1':
        return 1
    else: # recursive case
        if b[-1] == '0':
            return bin_to_dec(b[0:-1]) * 2 + 0
        if b[-1] == '1':
            return bin_to_dec(b[0:-1]) * 2 + 1
            


# Description: This file contains function bitwise_and(b1, b2), add_bitwise(b1, b2)

# function 1
def bitwise_and(b1, b2):
    """return the result in the form of a string by computing the bitwise AND of the two numbers
        input: b1 and b2 as two strings
    """
    # base cases
    if b1 == '' and b2 == '':
        return ''
    if b1 == '' or b2 == '':
        return '0' * (len(b1) + len(b2))
    else:
        rest = bitwise_and(b1[0:-1], b2[0:-1]) # store the return value in a variable
        if b1[-1] == '0' or b2[-1] == '0':
            return rest + '0'
        if b1[-1] == '1' and b2[-1] == '1':
            return rest + '1'




# function 2
def add_bitwise(b1, b2):
    """return the result of adding two binary numbers
        input: b1 and b2 as two strings
    """
    if b1 == '':
        return b2
    if b2 == '':
        return b1
    else:
        rest = add_bitwise(b1[0:-1], b2[0:-1])
        if b1[-1] != b2[-1]: # 0 + 1 or 1 + 0 condition
            return rest + '1'
        if b1[-1] == '0' and b2[-1] == '0': # 0 + 0 condition
            return rest + '0'
        if b1[-1] == '1' and b2[-1] == '1': # 1 + 1 with carry condition
            return add_bitwise(rest, '1') + '0'
